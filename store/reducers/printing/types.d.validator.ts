/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv from 'ajv';
import IPrintingState from './types.d';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export const IPrintingStateSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "defaultProperties": [
  ],
  "definitions": {
    "IModelProps": {
      "defaultProperties": [
      ],
      "properties": {
        "cameraParams": {
        },
        "description": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "image": {
          "description": "Not all models can be loaded and previewed"
        },
        "key": {
        },
        "uuid": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "filename",
        "key",
        "uuid"
      ],
      "type": "object"
    }
  },
  "properties": {
    "cards": {
      "description": "The array of uuids corresponding to each card",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "models": {
      "additionalProperties": {
        "$ref": "#/definitions/IModelProps"
      },
      "defaultProperties": [
      ],
      "description": "Map from uuid to the data associated with the card\nIt's much easier to maintain the store and use client side like this, as only\na uuid needs to be passed around, and when updating state don't have to find the index\nof the existing card in the cards list",
      "type": "object"
    },
    "version": {
      "type": "string"
    }
  },
  "required": [
    "cards",
    "models",
    "version"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isIPrintingState = ajv.compile(IPrintingStateSchema) as ValidateFunction<IPrintingState>;
export default function validate(value: unknown): IPrintingState {
  if (isIPrintingState(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isIPrintingState.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'IPrintingState'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
