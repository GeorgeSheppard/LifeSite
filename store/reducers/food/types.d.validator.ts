/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from "util";
import Ajv from "ajv";
import { IRecipesState } from "./types.d";
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: "fast",
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
});

ajv.addMetaSchema(require("ajv/lib/refs/json-schema-draft-06.json"));

export const IRecipesStateSchema = {
  $schema: "http://json-schema.org/draft-07/schema#",
  defaultProperties: [],
  definitions: {
    IIngredient: {
      defaultProperties: [],
      properties: {
        name: {
          description: "Name acts as uuid",
          type: "string",
        },
        nutritionData: {
          $ref: "#/definitions/INutritionData",
        },
      },
      required: ["name"],
      type: "object",
    },
    IInstruction: {
      defaultProperties: [],
      properties: {
        optional: {
          description: "Assumed false",
          type: "boolean",
        },
        text: {
          type: "string",
        },
      },
      required: ["text"],
      type: "object",
    },
    INutritionData: {
      defaultProperties: [],
      type: "object",
    },
    IQuantity: {
      defaultProperties: [],
      properties: {
        unit: {},
        value: {
          type: "number",
        },
      },
      type: "object",
    },
    IRecipe: {
      defaultProperties: [],
      properties: {
        components: {
          items: {
            $ref: "#/definitions/IRecipeComponent",
          },
          type: "array",
        },
        description: {
          type: "string",
        },
        images: {
          items: {},
          type: "array",
        },
        name: {
          type: "string",
        },
        uuid: {
          type: "string",
        },
      },
      required: ["components", "description", "images", "name", "uuid"],
      type: "object",
    },
    IRecipeComponent: {
      defaultProperties: [],
      properties: {
        ingredients: {
          items: {
            $ref: "#/definitions/IRecipeIngredient",
          },
          type: "array",
        },
        instructions: {
          items: {
            $ref: "#/definitions/IInstruction",
          },
          type: "array",
        },
        name: {
          type: "string",
        },
        servings: {
          type: "number",
        },
        storeable: {
          type: "boolean",
        },
      },
      required: ["ingredients", "instructions", "name"],
      type: "object",
    },
    IRecipeIngredient: {
      defaultProperties: [],
      properties: {
        name: {
          type: "string",
        },
        quantity: {
          $ref: "#/definitions/IQuantity",
        },
      },
      required: ["name", "quantity"],
      type: "object",
    },
  },
  properties: {
    cards: {
      items: {
        type: "string",
      },
      type: "array",
    },
    ingredients: {
      additionalProperties: {
        $ref: "#/definitions/IIngredient",
      },
      defaultProperties: [],
      type: "object",
    },
    recipes: {
      additionalProperties: {
        $ref: "#/definitions/IRecipe",
      },
      defaultProperties: [],
      type: "object",
    },
    version: {
      type: "string",
    },
  },
  required: ["cards", "ingredients", "recipes", "version"],
  type: "object",
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, "errors">;
export const isIRecipesState = ajv.compile(
  IRecipesStateSchema
) as ValidateFunction<IRecipesState>;
export default function validate(value: unknown): IRecipesState {
  if (isIRecipesState(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isIRecipesState.errors!.filter((e: any) => e.keyword !== "if"),
        { dataVar: "IRecipesState" }
      ) +
        "\n\n" +
        inspect(value)
    );
  }
}
